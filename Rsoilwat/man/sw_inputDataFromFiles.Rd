% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Rsw.R
\name{sw_inputDataFromFiles}
\alias{sw_inputDataFromFiles}
\title{Rsoilwat sw_inputDataFromFiles}
\usage{
sw_inputDataFromFiles(dir = "", files.in = "files_v30.in")
}
\arguments{
\item{dir}{String. The path to the Project Directory. Use with files.in}

\item{files.in}{String. The partial path, after project dir path, and file
name to files.in file.}
}
\value{
Returns a S4 class of type swInputData. This is a container for the
input S4 objects used to run soilwat. The data for the given project is
loaded.
}
\description{
Reads in a SoilWat Project's input data.  Returns swInputData Object.
}
\details{
swInputData Object is a S4 object containing slots for all input data.
Calling sw_inputDataFromFiles generates a new swInputData object with data
from the Project files given.

The data returned can be directly used to run the simulation if weather Data
was included in the Project Directory. If weather data was not in the
project directory then use onGetWeatherData_database or
onGetWeatherData_folders to obtain weatherDataList and pass both to sw_exec.

swInputData consists of slots for each file that is read in. These slots can
be accessed via the following functions: \tabular{ll}{ \code{get_Markov}
\tab #get markov prop and conv\cr \code{get_swCloud} \tab #get cloud\cr
\code{get_swFiles} \tab #get files.in\cr \code{get_swOUT} \tab #get
outpusetup.in\cr \code{get_swProd} \tab #get prod.in\cr \code{get_swSite}
\tab #get site.in\cr \code{get_swSoils} \tab #get soils.in\cr
\code{get_swSWC} \tab #get swcSetup.in\cr \code{get_swWeather} \tab #get
weatherSetup.in\cr \code{get_swWeatherData} \tab #get individual year\cr
\code{get_swYears} \tab #get years.in data object\cr
\code{get_WeatherHistory} \tab #get S4 of WeatherHistory\cr }

generic functions to get/set individual elements follow a format: 'sw' +
file name + '_' + option, e.g.  \itemize{ \item \code{swFiles_Cloud} \item
\code{swProd_Albedo} } Remember tab complete is your friend.

SOILWAT does not handle missing weather data. If you have missing data, then
you have to impute yourself or use the built-in Markov weather generator
(see examples for \code{\link{sw_exec}}).
}
\examples{

path_demo <- system.file("extdata", "example1", package = "Rsoilwat31")


## ------ Simulation with data prepared beforehand ------------
## Read inputs from files on disk (including daily weather forcing)
sw_in2 <- sw_inputDataFromFiles(dir = path_demo, files.in = "files_v31.in")

## Slots of the input object of class 'swInputData'
str(sw_in2, max.level=2)

## Execute the simulation run
sw_out2 <- sw_exec(inputData = sw_in2)


}
\author{
Ryan Murphy
}
\seealso{
\itemize{ \item \code{\link{sw_exec}} for running a simulation
\item \code{\link{sw_inputData}} and \code{\link{sw_inputDataFromFiles}} for
data input \item \code{\link{dbW_getWeatherData}} and
\code{\link{getWeatherData_folders}} for weather data input }
}

